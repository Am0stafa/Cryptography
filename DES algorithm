{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "2000360_T03_03.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMFOC0U0q4NeONp4ig/Qz4y",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Am0stafa/Cryprograpy/blob/master/DES%20algorithm\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Fnjiua6rGg5e",
        "outputId": "1b92187e-5c00-40bd-e2bc-5e33da58ac07"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'1000010111101000000100110101010000001111000010101011010000000101'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "def Get_S_box(number):  # This function takes the number of the S-box and returns the corresponding S-box\n",
        "\n",
        "    # Every S-box is represented as a list of lists\n",
        "    # Every list in each list of lists represents a row in the corresponding S-box\n",
        "    s1 = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],\n",
        "          [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],\n",
        "          [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],\n",
        "          [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]]\n",
        "    s2 = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],\n",
        "          [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],\n",
        "          [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],\n",
        "          [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]]\n",
        "    s3 = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],\n",
        "          [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],\n",
        "          [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],\n",
        "          [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]]\n",
        "    s4 = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],\n",
        "          [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],\n",
        "          [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],\n",
        "          [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]]\n",
        "    s5 = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],\n",
        "          [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],\n",
        "          [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],\n",
        "          [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]]\n",
        "    s6 = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],\n",
        "          [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],\n",
        "          [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],\n",
        "          [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]]\n",
        "    s7 = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],\n",
        "          [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],\n",
        "          [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],\n",
        "          [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]]\n",
        "    s8 = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],\n",
        "          [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],\n",
        "          [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],\n",
        "          [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]\n",
        "    switcher = {\n",
        "        1: s1,\n",
        "        2: s2,\n",
        "        3: s3,\n",
        "        4: s4,\n",
        "        5: s5,\n",
        "        6: s6,\n",
        "        7: s7,\n",
        "        8: s8\n",
        "\n",
        "    }\n",
        "    return switcher.get(number)\n",
        "\n",
        "def Substitution(value, s_box):  # This function takes a string of 6 bits and the desired s_box as inputs and returns a string of 4 bits after\n",
        "    row = int(value[0] + value[5], 2)\n",
        "    column = int(value[1] + value[2] + value[3] + value[4], 2)\n",
        "    value = bin(s_box[row][column])[2:]\n",
        "    while len(value) < 4:\n",
        "        value = '0' + value\n",
        "    return value\n",
        "\n",
        "\n",
        "def xOR(va1,va2):\n",
        "    res = []\n",
        "    collector =''\n",
        "    for x in range(len(va1)):\n",
        "        a = va1[x]#110011\n",
        "        b = va2[x]#101011\n",
        "        res.append(collector)\n",
        "        collector =''\n",
        "        for y in range(len(a)):\n",
        "            if a[y] =='1' and b[y]=='1' or  a[y] == '0' and b[y] == '0':\n",
        "                collector +='0'\n",
        "            elif a[y] == '1' and b[y] == '0' or a[y] == '0' and b[y] == '1' :\n",
        "                collector+='1'\n",
        "    res.pop(0)\n",
        "    res.append(collector)\n",
        "    return res\n",
        "\n",
        "\n",
        "def permute(permutaion,message):\n",
        "    permutedMessage = ''\n",
        "    for x in range(len(permutaion)):\n",
        "        for y in range(len(permutaion[x])):\n",
        "            permutedMessage += message[permutaion[x][y]-1] \n",
        "    return permutedMessage\n",
        "\n",
        "def divideInto4(array):\n",
        "    result  =[]\n",
        "    collector = ''\n",
        "    for x in range(len(array)):\n",
        "        if x%4 ==0:\n",
        "            result.append(collector)\n",
        "            collector=''\n",
        "        collector+=array[x]\n",
        "\n",
        "    result.pop(0)\n",
        "    result.append(collector)\n",
        "    return result\n",
        "\n",
        "def divideInto6(array):\n",
        "    result =[]\n",
        "    collector = ''\n",
        "    for x in range(len(array)):\n",
        "        if x % 6 == 0:\n",
        "            result.append(collector)\n",
        "            collector = ''\n",
        "        collector += array[x]\n",
        "    result.pop(0)\n",
        "    zz = ''\n",
        "    for j in range(6,0,-1):\n",
        "        zz+=array[-j]\n",
        "    result.append(zz)\n",
        "    return result\n",
        "\n",
        "def Ebit(arrOf4):\n",
        "    result = []\n",
        "    for x in range(len(arrOf4)):\n",
        "      result.append( arrOf4[(x-1)%len(arrOf4)][-1] + arrOf4[x] + arrOf4[(x+1)%len(arrOf4)][0] )\n",
        "    return result\n",
        "\n",
        "\n",
        "def Encrypt(message, keys):\n",
        "    # Every list in initial_permutation list of lists represents a row in the initial permutation table\n",
        "    initial_permutation = [ [58, 50, 42, 34, 26, 18, 10, 2],\n",
        "                            [60, 52, 44, 36, 28, 20, 12, 4],\n",
        "                            [62, 54, 46, 38, 30, 22, 14, 6],\n",
        "                            [64, 56, 48, 40, 32, 24, 16, 8],\n",
        "                            [57, 49, 41, 33, 25, 17, 9, 1],\n",
        "                            [59, 51, 43, 35, 27, 19, 11, 3],\n",
        "                            [61, 53, 54, 37, 29, 21, 13, 5],\n",
        "                            [63, 55, 47, 39, 31, 23, 15, 7] ]\n",
        "\n",
        "    # Every list in e_bit_selection list of lists represents a row in the e_bit_selection_table\n",
        "    e_bit_Selection = [ [32, 1, 2, 3, 4, 5],\n",
        "                        [4, 5, 6, 7, 8, 9],\n",
        "                        [8, 9, 10, 11, 12, 13],\n",
        "                        [12, 13, 14, 15, 16, 17],\n",
        "                        [16, 17, 18, 19, 20, 21],\n",
        "                        [20, 21, 22, 23, 24, 25],\n",
        "                        [24, 25, 26, 27, 28, 29],\n",
        "                        [28, 29, 30, 31, 32, 1] ]\n",
        "\n",
        "\n",
        "\n",
        "    # Every list in final_permutation list of lists represents a row in final_permutation table\n",
        "    final_permutation = [ [40, 8, 48, 16, 56, 24, 64, 32],\n",
        "                         [39, 7, 47, 15, 55, 23, 63, 31],\n",
        "                         [38, 6, 46, 14, 54, 22, 62, 30],\n",
        "                         [37, 5, 45, 13, 53, 21, 61, 29],\n",
        "                         [36, 4, 44, 12, 52, 20, 60, 28],\n",
        "                         [35, 3, 43, 11, 51, 19, 59, 27],\n",
        "                         [34, 2, 42, 10, 50, 18, 58, 26],\n",
        "                         [33, 1, 41, 9, 49, 17, 57, 25] ]\n",
        "\n",
        "    # Write your implementation here\n",
        "\n",
        "    #step 1: initial permutation:\n",
        "    permutedMessage = permute(initial_permutation,message)\n",
        "\n",
        "    #step 2:divide into L0 and R0\n",
        "    L0 = permutedMessage[:32]\n",
        "    R0 = permutedMessage[32:]\n",
        "    CurrentRound = 0\n",
        "    l,r = function(L0,R0,CurrentRound)\n",
        "\n",
        "    # concat l and r\n",
        "    con = r+l\n",
        "\n",
        "    #final permutation\n",
        "    result = permute(final_permutation,con)\n",
        "\n",
        "    return result\n",
        "\n",
        "\n",
        "def function(left,right,counter):\n",
        "\n",
        "    key = keys[counter]\n",
        "\n",
        "    #step 3: expand R0 using E-bit\n",
        "    expandedR0 =''\n",
        "\n",
        "    #divide right into 4\n",
        "    rightOf4 = divideInto4(right)\n",
        "\n",
        "    leftof4 = divideInto4(left)\n",
        "\n",
        "    new = Ebit(rightOf4)\n",
        "\n",
        "    #divide the key into 6\n",
        "    keyOf6 = divideInto6(key)\n",
        "\n",
        "\n",
        "    R0xK = xOR(keyOf6,new)\n",
        "\n",
        "\n",
        "    Sboxed = []\n",
        "    #S-box step\n",
        "    for s in range(len(R0xK)):\n",
        "        Sboxed.append(Substitution(R0xK[s],Get_S_box(s+1)))\n",
        "\n",
        "    m = \"\".join(Sboxed)\n",
        "\n",
        "    permutedR1 = permute(p_function,m)\n",
        "\n",
        "    permuted4 = divideInto4(permutedR1)\n",
        "\n",
        "    #xOR the above with L0 to get final R1\n",
        "    finalR1 = xOR(permuted4,leftof4)\n",
        "\n",
        "    Nleft = \"\".join(finalR1)\n",
        "    \n",
        "    if counter == 15:\n",
        "        return [right,Nleft]\n",
        "\n",
        "    return function(right,Nleft,counter+1)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "message = \"0000000100100011010001010110011110001001101010111100110111101111\"\n",
        "\n",
        "keys = [\"000110110000001011101111111111000111000001110010\",\n",
        "        \"011110011010111011011001110110111100100111100101\",\n",
        "        \"010101011111110010001010010000101100111110011001\",\n",
        "        \"011100101010110111010110110110110011010100011101\",\n",
        "        \"011111001110110000000111111010110101001110101000\",\n",
        "        \"011000111010010100111110010100000111101100101111\",\n",
        "        \"111011001000010010110111111101100001100010111100\",\n",
        "        \"111101111000101000111010110000010011101111111011\",\n",
        "        \"111000001101101111101011111011011110011110000001\",\n",
        "        \"101100011111001101000111101110100100011001001111\",\n",
        "        \"001000010101111111010011110111101101001110000110\",\n",
        "        \"011101010111000111110101100101000110011111101001\",\n",
        "        \"100101111100010111010001111110101011101001000001\",\n",
        "        \"010111110100001110110111111100101110011100111010\",\n",
        "        \"101111111001000110001101001111010011111100001010\",\n",
        "        \"110010110011110110001011000011100001011111110101\"]\n",
        "\n",
        "p_function = [[16, 7, 20, 21],\n",
        "              [29, 12, 28, 17],\n",
        "              [1, 15, 23, 26],\n",
        "              [5, 18, 31, 10],\n",
        "              [2, 8, 24, 14],\n",
        "              [32, 27, 3, 9],\n",
        "              [19, 13, 30, 6],\n",
        "              [22, 11, 4, 25]]\n",
        "\n",
        "\n",
        "Encrypt(message, keys)\n",
        "\n"
      ]
    }
  ]
}